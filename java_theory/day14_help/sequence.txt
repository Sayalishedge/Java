Revise 

1. Functional interface => Any i/f containing SAM , can contain optionally multiple default / static method
eg :Runnable , Comparable , Comparator ....


New anno since Java 8 : @FunctionalInterface --i/f level annotation

New package  : java.util.function : consists of functional i/fs ---Consumer, Supplier, Predicate,Function,BiConsumer...

syntax of lambda expr in Java 
(args) -> {....}

IMPORTANT : Can func i/f be substituted by lambda expr ? YESS
Why : since it holds single abstract behavior --which can be replaced by lambda expr

2. Enter Functional programming in Java

Earlier programming paradigm ,where programmer has to supply ENTIRE details consisting of "WHAT" n "HOW" , is called as imperative style.

Modern approach is declarative style or functional programming style

OOP uses imperative style of programming (where you will have to specify what's to be done & how --both) .
FP uses declarative style of programming (where you will just have to specify what's to be done )

What is a functional programming  paradigm ?
A language where below features are supported.

Functions are treated as a first class citizens.
Meaning :  You can 
1.1  define anonymous functions
1.2  assign a function to a variable (function literal)
1.3  pass function as a parameter
1.4  return function as a return value

Why FP ?

1. To write more readable , maintainable , clean & concise code.
2. To use Stream APIs easily n effectively.
3. To enable parallel processing 



eg : Objective 
Find out the average salary of emp from the specified dept.

How will you do it in imperative manner? 
eg : Suppose you have a populated ArrayList of emps : l1: AL<Emp>
sop("Enter dept name");
String dept=sc.next();
double total=0;
int num=0;
for(Emp e : l1)
  if(e.getDept().equals(dept)) {
   total += e.getSal();
   num++;
  }
sop(total/num);



Vs
How to do it in declarative style ?
eg : 
l1.stream().filter(e->e.getDept().equals(dept)).mapToDouble(Emp::getSal).average().getAsDouble();



Revise : 
1. Create your own functional interface n use it in lambda expression

eg : Perform ANY arithmetic operation on 2 double values & return the result
eg --add/multiply/subtract/divide....  ANY such operation !



Explore Existing higher order functions/methods

Copy ready code first.

Solve :  

1.
Display all products (from a product list)
API :  Iterable : forEach 


2. 
Remove all the products of a specific category
Collection : removeIf




3. 
Display all products (from a product map)
Ans this 
Is Map Iterable ?
Can u attach DIRECTLY a for-each loop to the map ? 

Imperative style
for(Product p : map.values())
 sop(p);
Any Declarative (Functional prog solution ?)



4. Sort the products from the list , as per date : custom ordering
How ?





5 Use Function literal


6. Using above API(higher order funcs) , can you chain multiple operations like sorting & displaying the sorted data ? NO

OR
Filter the elements n display filtered list.  : NO

Objective : Accept product category from user
remove all products from specified category n display remaining list : multiple ops can't be chained !


3. Enter Java 8 Functional Streams

Refer to <streams> : diagrams
collections vs streams n streams basics


 Refer to "streams_sequence"


