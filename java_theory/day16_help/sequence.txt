Revise  I/O(Input / Output)

Java supports handling of different devices
eg : Keyboard(System.in), Console(System.out), File(text file n bin files) ,networking Sockets(end point of communication in distributed computing) , Pipes(virtual data pipe existing between multiple threads)
.....

I/O Streams
Stream : represents data transfer to/fro Java app n device
Input stream : Reads data from device --> Java App
Output stream : Writes data from Java App --> device

The packages used for handling devices in Java : java.io, java.nio

java.io : In case of any errs in read/write operation ---JVM throws : java.io.IOException
(checked exc)

read/write methods :blocking or non blocking ? : Represnts blocking API
Meaning : It causes the blocking of invoker thread , until read/write operation is complete.

Inheritance hierarchy of classes in java.io
refer : to a diagram

When will you need to open output stream ?
When will you need to open input stream ?

java.io --2 types of strms
1. Binary strms
2. char strms

Name 4 abstract super classes in I/O hierarchy :  

Node streams : device handling strms
File Handling strms : 
Buffering strms : 

Objective : 
1. Text files 
1.1 copy text files using buffered streams
i/p : src n dest file names


1.2 Suppose you have product details in a list/map. Can you store these details sorted as per price in a text file , in a buffered manner ? : Lab work


2. Enter Binary file handling streams 
2.1 Node streams -- FileInputStream(String fileName) , FileOutputStream(String fileName)
2.2 Buffering of bin data : BufferedInputStream(InputStream in), BufferedOutputStream(OutputStream out)

What's the need of formatting/conversion streams?
Without conversion streams , a prog will have to convert any data type(eg : int ,boolean , double , Category, date...) to binary(bytes) --a complex / tedious task

Instead use conversion streams
1. Data I/O Streams 
1.1 java.io.DataOutputStream(OutputStream out): concrete  class (implements DataOutput)
Meant for conversion , any primitive type n strings --> binary(bytes)
Methods



1.2 To restore the data from binary --> mixed data(primtive/string)
class : java.io.DataInputStream(InputStream in) : concrete  class (implements DataInput)
Methods :
public int readInt() throws IOException
public boolean readBoolean() throws IOException
public double readDouble() throws IOException
public String readUTF() throws IOException
.....

Limitation of above stream classes (DIS , DOS) : They can't directly convert java objects to binary . Meaning a prog will have to extract data members n invoke the API

Better option : use Object Streams : ObjectOutputStream n ObjectInputStream
Serialization = Conversion from Java Object --> Binary stream
What exactly gets converted ? State of the object
State : non static n non transient data members

java.io.ObjectOutputStream : performs Serialization (Serializer)
implements DataOutput , ObjectOutput

Constructor : ObjectOutputStream(OutputStream out)
Methods :
public void writeInt(int i) throws IOException
public void writeBoolean(booelan i) throws IOException
public void writeDouble(double i) throws IOException
public void writeUTF(String i) throws IOException
+
public void writeObject(Object o) throws IOException, NotSerializableException

When does JVM throw : NotSerializableException ?
JVM checks the serializability of java object , when you invoke : writeObject method.

If class has implemented java.io.Serializable i/f , JVM allows the conversion.
BUT if JVM comes across any non -serializable object , it aborts the whole process n throws the exception

De Serialization=Restoring Java object from bin stream
Class : java.io.ObjectInputStream(InputStream in) , implements DataInput,ObjectInput
Methods
public int readInt() throws IOException
public double readDouble() throws IOException
public String readUTF() throws IOException
...
+ for de ser :
public Object readObject() throws IOException, ClassNotFoundException ...





























2.3 Integration of Collection + I/O
Store n later restore the products from bin file
(Lab exam practice)

Steps
1. Get populated list of products --store these details in a bin file , using bin streams

1.1 Core classes  : Product , Category 

1.2 custom exc

1.3 ShopUtils --collection utils --
populate list
populate map


1.4 IOUtils -- i/f
add a static method --to store the  products in a bin file       


1.5 Tester : StoreProductDetails --
Accept name of file from user n call our own API

2. Restore the product details from a bin file ---> Java App (List)

Enter JDBC

Objectives
1. Establish DB connection
2. Test Statement
sql : select * from users
Display all users' details

--------------------------Completed so far------------------


3. Test PreparedStatement
4. Test user's CRUD using DAO n POJO layers
5. Invoke stored procedure.









